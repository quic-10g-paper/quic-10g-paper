{
    "regex:.*AEAD.*": "CRYPTO (AEAD)",
    "regex:.*apply_hp.*": "CRYPTO (HP apply)",
    "regex:.*strip_hp.*": "CRYPTO (HP strip)",
    "regex:.*AES.*": "CRYPTO (AES)",
    "regex:.*aes.*": "CRYPTO (AES)",
    "regex:.*RSA.*": "CRYPTO (RSA)",
    "regex:.*25519.*": "CRYPTO (25519)",
    "regex:.*chacha20_poly1305_open.*": "CRYPTO (ChaCha20 Open)",
    "regex:.*chacha20.*": "CRYPTO (ChaCha20)",
    "regex:.*decrypt_packet.*": "CRYPTO (decrypt packet)",
    "regex:.*encrypt_packet.*": "CRYPTO (encrypt packet)",
    "regex:.*CRYTPO.*": "CRYPTO",
    "regex:.*[Hh]andshake.*": "HANDSHAKE (quiche::Connection)",
    "regex:.*RangeSet.*": "ACK (RangeSet)",
    "regex:.*[Bb][Tt]ree.*": "FLOWCONTROL (btree)",
    "regex:.*fs_write.*": "IO (file)",
    "regex:.*epoll_.*": "IO (epoll)",
    "regex:.*ksys_write.*": "IO (write)",
    "regex:.*ksys_read.*": "IO (read)",
    "regex:.*_IO_.*": "IO",
    "regex:.*__libc_read.*": "PACKET_IO (read)",
    "regex:.*__libc_sendto.*": "PACKET_IO (sendto)",
    "regex:.*__libc_recvfrom.*": "PACKET_IO (recvfrom)",
    "regex:.*__libc_sendmsg.*": "PACKET_IO (sendmsg)",
    "regex:.*__libc_recvmsg.*": "PACKET_IO (recvmsg)",
    "regex:.*": "GENERAL (UNMATCHED)"
}
